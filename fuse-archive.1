.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "fuse-archive" "1" "April 2025" "fuse-archive 1.13" "User Manual"
.hy
.SH NAME
.PP
\f[B]fuse-archive\f[R] - Mount an archive or compressed file as a FUSE
file system.
.SH SYNOPSIS
.PP
\f[B]fuse-archive\f[R] [\f[I]options\f[R]] \f[I]archive-file\f[R]
[\f[I]mount-point\f[R]]
.SH DESCRIPTION
.PP
\f[B]fuse-archive\f[R] is a program that serves an archive or compressed
file (e.g.
\f[V]foo.tar\f[R], \f[V]foo.tar.gz\f[R], \f[V]foo.xz\f[R] or
\f[V]foo.zip\f[R]) as a read-only
FUSE (https://en.wikipedia.org/wiki/Filesystem_in_Userspace) file
system.
.PP
It is similar to
\f[B]mount-zip\f[R] (https://github.com/google/mount-zip) and
\f[B]fuse-zip\f[R] (https://bitbucket.org/agalanin/fuse-zip) but speaks
a larger range of archive or compressed file formats.
.PP
It is similar to
\f[B]archivemount\f[R] (https://github.com/cybernoid/archivemount) but
can be much faster (see the Performance section below) although it can
only mount read-only, not read-write.
.SH OPTIONS
.TP
\f[B]--help\f[R] or \f[B]-h\f[R]
Print help
.TP
\f[B]--version\f[R] or \f[B]-V\f[R]
Print version
.TP
\f[B]-o quiet\f[R] or \f[B]-q\f[R]
Print fewer log messages
.TP
\f[B]-o verbose\f[R] or \f[B]-v\f[R]
Print more log messages
.TP
\f[B]-o redact\f[R]
Redact file names from log messages
.TP
\f[B]-o force\f[R]
Continue despite errors
.TP
\f[B]-o lazycache\f[R]
Incremental caching of uncompressed data
.TP
\f[B]-o nocache\f[R]
No caching of uncompressed data
.TP
\f[B]-o nospecials\f[R]
Hide special files (FIFOs, sockets, devices)
.TP
\f[B]-o nosymlinks\f[R]
Hide symbolic links
.TP
\f[B]-o nohardlinks\f[R]
No files with multiple hard links
.TP
\f[B]-o dmask=M\f[R]
Directory permission mask in octal (default 0022)
.TP
\f[B]-o fmask=M\f[R]
File permission mask in octal (default 0022)
.TP
\f[B]-o uid=N\f[R]
Set the file owner of all the items in the mounted archive (default is
current user)
.TP
\f[B]-o gid=N\f[R]
Set file group of all the items in the mounted archive (default is
current group)
.TP
\f[B]-o default_permissions\f[R]
Use the file owner (UID), group (GID) and permissions stored with each
item in the archive.
.TP
\f[B]-f\f[R]
Foreground mode
.TP
\f[B]-d\f[R]
Foreground mode with debug output
.SH ARCHIVE FORMATS
.PP
\f[B]fuse-archive\f[R] determines the archive format from its filename
extension.
It recognizes the following extensions:
.IP \[bu] 2
Archive formats \f[V]7z\f[R], \f[V]7zip\f[R], \f[V]a\f[R], \f[V]ar\f[R],
\f[V]cab\f[R], \f[V]cpio\f[R], \f[V]deb\f[R], \f[V]iso\f[R],
\f[V]iso9660\f[R], \f[V]jar\f[R], \f[V]mtree\f[R], \f[V]rar\f[R],
\f[V]rpm\f[R], \f[V]tar\f[R], \f[V]warc\f[R], \f[V]xar\f[R],
\f[V]zip\f[R], \f[V]zipx\f[R]
.IP \[bu] 2
ZIP-based file formats \f[V]crx\f[R], \f[V]odf\f[R], \f[V]odg\f[R],
\f[V]odp\f[R], \f[V]ods\f[R], \f[V]odt\f[R], \f[V]docx\f[R],
\f[V]ppsx\f[R], \f[V]pptx\f[R], \f[V]xlsx\f[R]
.IP \[bu] 2
Compressed TARs \f[V]tb2\f[R], \f[V]tbz\f[R], \f[V]tbz2\f[R],
\f[V]tz2\f[R], \f[V]tgz\f[R], \f[V]tlz\f[R], \f[V]tlz4\f[R],
\f[V]tlzma\f[R], \f[V]txz\f[R], \f[V]tz\f[R], \f[V]taz\f[R],
\f[V]tzs\f[R], \f[V]tzst\f[R], \f[V]tzstd\f[R], \f[V]tar.br\f[R],
\f[V]tar.brotli\f[R], \f[V]tar.bz2\f[R], \f[V]tar.bzip2\f[R],
\f[V]tar.grz\f[R], \f[V]tar.grzip\f[R], \f[V]tar.gz\f[R],
\f[V]tar.gzip\f[R], \f[V]tar.lha\f[R], \f[V]tar.lrz\f[R],
\f[V]tar.lrzip\f[R], \f[V]tar.lz\f[R], \f[V]tar.lz4\f[R],
\f[V]tar.lzip\f[R], \f[V]tar.lzma\f[R], \f[V]tar.lzo\f[R],
\f[V]tar.lzop\f[R], \f[V]tar.xz\f[R], \f[V]tar.z\f[R],
\f[V]tar.zst\f[R], \f[V]tar.zstd\f[R]
.IP \[bu] 2
Compression filters \f[V]br\f[R], \f[V]brotli\f[R], \f[V]bz2\f[R],
\f[V]bzip2\f[R], \f[V]grz\f[R], \f[V]grzip\f[R], \f[V]gz\f[R],
\f[V]gzip\f[R], \f[V]lha\f[R], \f[V]lrz\f[R], \f[V]lrzip\f[R],
\f[V]lz\f[R], \f[V]lz4\f[R], \f[V]lzip\f[R], \f[V]lzma\f[R],
\f[V]lzo\f[R], \f[V]lzop\f[R], \f[V]xz\f[R], \f[V]z\f[R], \f[V]zst\f[R],
\f[V]zstd\f[R]
.IP \[bu] 2
ASCII encoding filters \f[V]b64\f[R], \f[V]base64\f[R], \f[V]uu\f[R]
.PP
If the filename extension is not recognized, then \f[B]fuse-archive\f[R]
determines the archive format by looking at its byte contents.
This heuristic works all right most of the time, but there are corner
cases for which it might get confused.
.PP
\f[B]fuse-archive\f[R] relies on the availability of the following
filter programs: \f[V]base64\f[R], \f[V]brotli\f[R], \f[V]compress\f[R],
\f[V]lrzip\f[R] and \f[V]lzop\f[R].
.SH CACHING
.PP
By default, \f[B]fuse-archive\f[R] decompresses and caches the whole
archive before serving its contents.
This ensures that the served files can be accessed in any order without
any performance issue.
.PP
Decompressed data is cached in an anonymous file created in the
\f[V]tmp\f[R] directory (\f[V]$TMPDIR\f[R] or \f[V]/tmp\f[R] by
default).
This cache can use a significant amount of disk space, but it is
automatically deleted when the archive is unmounted.
.PP
If there is not enough temporary space to cache the whole archive,
\f[B]fuse-archive\f[R] can be run with the \f[V]-o nocache\f[R] or the
\f[V]-o lazycache\f[R] options.
However, this can cause \f[B]fuse-archive\f[R] to be much slower at
serving files.
.SH PERFORMANCE
.PP
Create a single \f[V].tar.gz\f[R] file that is 256 MiB decompressed and
255 KiB compressed (the file just contains repeated 0x00 NUL bytes):
.IP
.nf
\f[C]
$ truncate --size=256M zeroes
$ tar cfz zeroes-256mib.tar.gz zeroes
\f[R]
.fi
.PP
Here are \f[B]fuse-archive\f[R]\[cq]s timings:
.IP
.nf
\f[C]
$ time fuse-archive zeroes-256mib.tar.gz mnt
real    0m0.443s

$ dd if=mnt/zeroes of=/dev/null status=progress
268435456 bytes (268 MB, 256 MiB) copied, 0.836048 s, 321 MB/s

$ fusermount -u mnt
\f[R]
.fi
.PP
For comparison, here are \f[B]archivemount\f[R]\[cq]s timings:
.IP
.nf
\f[C]
$ time archivemount zeroes-256mib.tar.gz mnt
real    0m0.581s

$ dd if=mnt/zeroes of=/dev/null status=progress
268435456 bytes (268 MB, 256 MiB) copied, 570.146 s, 471 kB/s

$ fusermount -u mnt
\f[R]
.fi
.PP
In this case, \f[B]fuse-archive\f[R] takes about the same time to load
the archive as \f[B]archivemount\f[R], but it is \f[B]\[ti]700\[tmu]
faster\f[R] (0.83s vs 570s) to copy out the decompressed contents.
This is because \f[B]fuse-archive\f[R] fully caches the archive and does
not use \f[B]archivemount\f[R]\[cq]s quadratic complexity
algorithm (https://github.com/cybernoid/archivemount/issues/21).
.SH RETURN VALUE
.TP
\f[B]0\f[R]
Success.
.TP
\f[B]1\f[R]
Generic error code for: missing command line argument, too many command
line arguments, unknown option, mount point is not empty, etc.
.TP
\f[B]10\f[R]
Cannot create the mount point.
.TP
\f[B]11\f[R]
Cannot open the archive file.
.TP
\f[B]12\f[R]
Cannot create the cache file.
.TP
\f[B]13\f[R]
Cannot write to the cache file.
This is most likely the indication that there is not enough temp space.
.TP
\f[B]20\f[R]
The archive contains an encrypted file, but no password was provided.
.TP
\f[B]21\f[R]
The archive contains an encrypted file, and the provided password does
not decrypt it.
.TP
\f[B]22\f[R]
The archive contains an encrypted file, and the encryption method is not
supported.
.TP
\f[B]30\f[R]
Cannot recognize the archive format.
.TP
\f[B]31\f[R]
Invalid archive header.
.TP
\f[B]32\f[R]
Cannot read and extract the archive.
.SH SEE ALSO
.PP
archivemount(1), mount-zip(1), fuse-zip(1), fusermount(1), fuse(8),
umount(8)
